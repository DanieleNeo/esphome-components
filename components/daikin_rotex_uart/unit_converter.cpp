#include "esphome/components/daikin_rotex_uart/unit_converter.h"

const std::vector<std::pair<double, double>> r410a_table = {
    {-65.0, 0.482},
    {-64.0, 0.511},
    {-63.0, 0.542},
    {-62.0, 0.574},
    {-61.0, 0.607},
    {-60.0, 0.642},
    {-59.0, 0.679},
    {-58.0, 0.717},
    {-57.0, 0.757},
    {-56.0, 0.799},
    {-55.0, 0.843},
    {-54.0, 0.888},
    {-53.0, 0.935},
    {-52.0, 0.985},
    {-51.0, 1.036},
    {-50.0, 1.090},
    {-49.0, 1.146},
    {-48.0, 1.204},
    {-47.0, 1.264},
    {-46.0, 1.326},
    {-45.0, 1.391},
    {-44.0, 1.459},
    {-43.0, 1.529},
    {-42.0, 1.602},
    {-41.0, 1.677},
    {-40.0, 1.755},
    {-39.0, 1.836},
    {-38.0, 1.920},
    {-37.0, 2.007},
    {-36.0, 2.096},
    {-35.0, 2.189},
    {-34.0, 2.285},
    {-33.0, 2.385},
    {-32.0, 2.487},
    {-31.0, 2.593},
    {-30.0, 2.703},
    {-29.0, 2.816},
    {-28.0, 2.933},
    {-27.0, 3.053},
    {-26.0, 3.177},
    {-25.0, 3.306},
    {-24.0, 3.438},
    {-23.0, 3.574},
    {-22.0, 3.714},
    {-21.0, 3.858},
    {-20.0, 4.007},
    {-19.0, 4.160},
    {-18.0, 4.317},
    {-17.0, 4.479},
    {-16.0, 4.645},
    {-15.0, 4.817},
    {-14.0, 4.992},
    {-13.0, 5.173},
    {-12.0, 5.359},
    {-11.0, 5.550},
    {-10.0, 5.746},
    { -9.0, 5.947},
    { -8.0, 6.153},
    { -7.0, 6.365},
    { -6.0, 6.583},
    { -5.0, 6.806},
    { -4.0, 7.034},
    { -3.0, 7.268},
    { -2.0, 7.509},
    { -1.0, 7.755},
    {  0.0, 8.007},
    {  1.0, 8.265},
    {  2.0, 8.530},
    {  3.0, 8.801},
    {  4.0, 9.078},
    {  5.0, 9.362},
    {  6.0, 9.653},
    {  7.0, 9.950},
    {  8.0, 10.25},
    {  9.0, 10.57},
    { 10.0, 10.88},
    { 11.0, 11.21},
    { 12.0, 11.54},
    { 13.0, 11.88},
    { 14.0, 12.23},
    { 15.0, 12.58},
    { 16.0, 12.95},
    { 17.0, 13.32},
    { 18.0, 13.70},
    { 19.0, 14.08},
    { 20.0, 14.48},
    { 21.0, 14.88},
    { 22.0, 15.29},
    { 23.0, 15.71},
    { 24.0, 16.14},
    { 25.0, 16.57},
    { 26.0, 17.02},
    { 27.0, 17.48},
    { 28.0, 17.94},
    { 29.0, 18.41},
    { 30.0, 18.89},
    { 31.0, 19.39},
    { 32.0, 19.89},
    { 33.0, 20.40},
    { 34.0, 20.92},
    { 35.0, 21.45},
    { 36.0, 21.99},
    { 37.0, 22.54},
    { 38.0, 23.10},
    { 39.0, 23.67},
    { 40.0, 24.26},
    { 41.0, 24.85},
    { 42.0, 25.45},
    { 43.0, 26.07},
    { 44.0, 26.70},
    { 45.0, 27.34},
    { 46.0, 27.99},
    { 47.0, 28.65},
    { 48.0, 29.32},
    { 49.0, 30.01},
    { 50.0, 30.71},
    { 51.0, 31.42},
    { 52.0, 32.14},
    { 53.0, 32.88},
    { 54.0, 33.63},
    { 55.0, 34.39},
    { 56.0, 35.17},
    { 57.0, 35.96},
    { 58.0, 36.76},
    { 59.0, 37.58},
    { 60.0, 38.42},
    { 61.0, 39.27},
    { 62.0, 40.13},
    { 63.0, 41.01},
    { 64.0, 41.91},
    { 65.0, 42.82},
    { 66.0, 43.75},
    { 67.0, 44.70},
    { 68.0, 45.67},
    { 69.0, 46.65},
    { 70.0, 47.65},
    { 71.0, 48.67}
};

double UnitConverter::liquid_pressure_to_temperature(double pressureBar) {
    const double divider = 10.0;

    const auto& table = r410a_table;

    if (pressureBar < table.front().second || pressureBar > table.back().second) {
        return -1; // Druck außerhalb des gültigen Bereichs!
    }

    for (size_t i = 1; i < table.size(); ++i) {
        if (pressureBar <= table[i].second) {
            double x1 = table[i - 1].second;
            double y1 = table[i - 1].first;
            double x2 = table[i].second;
            double y2 = table[i].first;

            return (y1 + (pressureBar - x1) * (y2 - y1) / (x2 - x1)) * divider;
        }
    }
    return -1;
}